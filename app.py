"""
This is a echo bot.
It echoes any incoming text messages.
"""
import logging
import re
import json
import random

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from taro import TARO_SET
import time

from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = '5588729871:AAE_3Y1i4w321rWaLj9f_83myMlFhbV9wHQ'
# API_TOKEN = '1698570040:AAGvmUeVtpTKw18dn-VlTUAXDT04vWp-uhI'
# CHATS_SET = [-1001785608646]

f = open('tags.json', encoding="utf8")
TAG_SET = json.load(f)
f.close()

NUDES_TIMES = {}
NUDES_DUPLICATE = {}
BEER_TIMES = {}
BEER_DUPLICATE = {}

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

regex = r"[\s]*@[^\s]+[\s]*"


async def get_all_tag():
    tag_arr = []
    for speciality in TAG_SET.values():
        for people in speciality.values():
            tag_arr = tag_arr + people
    return tag_arr


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when client send `/start` or `/help` commands.
    """
    await bot.send_message(message.chat.id, "Add me to the Buddy group!!\nThat's all that I want!")


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    text = """–í–µ—á—ñ—Ä –≤ —Ö–∞—Ç—É!\n–Ø–∫—â–æ —Ö–æ—á–µ—à –∑–∞–¥–æ–≤–±–∞—Ç–∏ –±–∞–¥–¥—ñ —Ç–µ–≥–∞–Ω—ñ—î–º, —Ç–æ —è —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–∂—É!\n
–®–æ –¥—î–ª–∞—Ç—å:\n1. –í –º–µ–Ω–µ —î –Ω–∞–±—ñ—Ä —Ç–µ–≥—ñ–≤, —è–∫—ñ —Ç–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç. –©–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–≥–∏ –Ω–∞–ø–∏—à–∏ /helpm\n
2. –ü–∏—à–µ—à –≤ —á–∞—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ @fi —ñ —Ç–æ–±—ñ —Ç–µ–≥–Ω–µ –≤—Å—ñ—Ö —Ñ—ñ—à–Ω–∏–∫—ñ–≤. –¢–∞–∫–æ–∂ —î —Ç–µ–≥–∏ –æ–∫—Ä–µ–º–æ –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ.\n\n–•—É—Ç—á—ñ—à –∑–∞—Ç–µ–≥—ñ–≤–∞–π –ª—é–¥–µ–π! –¶—å–æ–º!
    """
    await bot.send_message(message.chat.id, text, parse_mode='Markdown')


@dp.message_handler(commands=['helpm'])
async def send_more_help(message: types.Message):
    text = """
*–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –¥—É–¥–æ—Å–∞ –ë–∞–¥–¥—ñ 2022*\n
@–∫–∞—Ä—Ç–∞–¥–Ω—è - –∫–∞—Ä—Ç–∞ –¥–Ω—è
@–ø—ñ–≤–æ - –ø—ñ–≤–æ
@–Ω—é–¥—Å–∏ - —Ç–µ–≥–∞—î –æ–¥–Ω–æ–≥–æ –ë–∞–¥–¥—ñ, —è–∫–∏–π –ø–æ–≤–∏–Ω–Ω–µ–Ω —Ç–æ–±—ñ –∫–∏–Ω—É—Ç–∏ –Ω—é–¥—Å–∏\n
@all - –∑–∞–¥—É–¥–æ—Å–∏—Ç–∏ –≤—Å—ñ—Ö –±–∞–¥–¥—ñ\n
–§–Ü
@—Ñ—ñ - —Ñ—ñ—à–Ω–∏–∫–∏
@–∫–Ω @—ñ–ø–∑ @–ø–º @–∫–± - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö\n
–§–ï–ù
@—Ñ–µ–Ω - –≤–µ—Å—å –§–ï–ù
@—Ñ—ñ–Ω–∞–Ω—Å–∏ @–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ @–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç @–µ–∫–æ–Ω–æ–º—ñ–∫–∞ - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö\n
–§–ü–≤–ù
@—Ñ–ø–≤–Ω - –≤–µ—Å—å –§–ü–≤–ù
@–ø—Ä–∞–≤–æ  - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö\n
–§–°–ù–°–¢
@—Ñ—Å–Ω—Å—Ç - –≤–µ—Å—å –§–°–ù–°–¢
@–ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è @—Å–æ—Ü—ñ–æ–ª–æ–≥—ñ—è @—Å–æ—Ü—Ä–æ–± @–º—ñ–∂–Ω–∞—Ä @–ø—ñ–∞—Ä @–ø–æ–ª—ñ—Ç–æ–ª–æ–≥—ñ—è - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö\n
–§–ü—Ä–ù
@—Ñ–ø—Ä–Ω - –≤–µ—Å—å –§–ü—Ä–ù
@—Ö—ñ–º—ñ—è @—Ñ—ñ–∑–∏–∫–∞ @–µ–∫–æ–ª–æ–≥—ñ—è @–±—ñ–æ–ª–æ–≥—ñ—è - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö\n
–§–ì–ù
@—Ñ–≥–Ω - —Ñ–µ—Å—å –§–ì–ù
@–≥–µ—Ä–º–∞–Ω—Å—å–∫–∞ @—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ @—Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è @–∫—É–ª—å—Ç—É—Ä–æ–ª–æ–≥—ñ—è @—ñ—Å—Ç–æ—Ä—ñ—è - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö
    """
    await bot.send_message(message.chat.id, text, parse_mode='Markdown')

# VOTE_SET = {}
# keyboard = InlineKeyboardMarkup()
# keyboard.add(InlineKeyboardButton(text="üëâüëå", callback_data="fuck_user"),
#              InlineKeyboardButton(text="üë∞‚Äç‚ôÄÔ∏èüë∞‚Äç‚ôÇÔ∏è", callback_data="merry_user"),
#              InlineKeyboardButton(text="üíÄ", callback_data="kill_user"))
# keyboard.add(InlineKeyboardButton(text="–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è", callback_data="vote_end"))

# @dp.message_handler(regexp='@–≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è')
# async def nudes(message: types.Message):
#     # if message.chat.id not in CHATS_SET:
#     #     return
#     matches = re.finditer(regex, message.text, re.MULTILINE)
#     tags = []
#     for match in matches:
#         tag = match.group().strip()
#         if tag != "@–≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è":
#             tags.append(match.group().strip())
#     if len(tags) != 0:
#         msg = await message.answer(f"–®–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –∑ {tags[0]}", reply_markup=keyboard)
#         VOTE_SET[msg["message_id"]] = {"tag": tags[0]}


# @dp.callback_query_handler()
# async def process_callback(callback_query: types.CallbackQuery):
#     data = callback_query.data
#     chat_id = callback_query["message"]["chat"]["id"]
#     message_id = callback_query["message"]["message_id"]
#     user_id = callback_query["from"]["id"]
#     try:
#         if data == "fuck_user":
#             VOTE_SET[message_id][user_id] = "fuck"
#             await bot.answer_callback_query(callback_query.id, text='–û—Å—å —ñ –Ω–µ–º–∞ —Ç—Ä—É—Å—ñ–≤', show_alert=True)
#             await bot.edit_message_text(
#                 f"–®–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –∑ {VOTE_SET[message_id]['tag']}.\n–ü—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–æ {len(VOTE_SET[message_id])-1}",
#                 chat_id=chat_id,
#                 message_id=message_id, reply_markup=keyboard)
#         elif data == "merry_user":
#             VOTE_SET[message_id][user_id] = "merry"
#             await bot.answer_callback_query(callback_query.id, text='–ú–∞—î—à —Ñ–∞–π–Ω–∏–π —Å–º–∞–∫', show_alert=True)
#             await bot.edit_message_text(
#                 f"–®–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –∑ {VOTE_SET[message_id]['tag']}.\n–ü—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–æ {len(VOTE_SET[message_id])-1}",
#                 chat_id=chat_id,
#                 message_id=message_id, reply_markup=keyboard)
#         elif data == "kill_user":
#             VOTE_SET[message_id][user_id] = "kill"
#             await bot.answer_callback_query(callback_query.id, text='–Ø–∫—à–æ —à–æ —è —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–∂—É —Ç—Ä—É–ø –∑–∞–∫–æ–ø–∞—Ç—å', show_alert=True)
#             await bot.edit_message_text(
#                 f"–®–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –∑ {VOTE_SET[message_id]['tag']}.\n–ü—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–æ {len(VOTE_SET[message_id])-1}", chat_id=chat_id,
#                 message_id=message_id, reply_markup=keyboard)
#         else:
#             fuck_counter = 0
#             merry_counter = 0
#             kill_counter = 0
#             for value in VOTE_SET[message_id].values():
#                 if value == "fuck":
#                     fuck_counter = fuck_counter + 1
#                 elif value == "merry":
#                     merry_counter = merry_counter + 1
#                 elif value == "kill":
#                     kill_counter = kill_counter + 1
#             await bot.edit_message_text(f"{VOTE_SET[message_id]['tag']} –æ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n–í–±–∏–≤–∞—é—Ç—å —Ç–µ–±–µ - {kill_counter} –ª—é–¥–µ–π\n–û–¥—Ä—É–∂—É—é—Ç—å—Å—è –Ω–∞ —Ç–æ–±—ñ - {merry_counter} –ª—é–¥–µ–π\n–á–±—É—Ç—å —Ç–µ–±–µ - {fuck_counter} –ª—é–¥–µ–π", chat_id, message_id)
#             VOTE_SET.pop(message_id)
#     except:
#         pass

@dp.message_handler(regexp='@–ø—ñ–≤–æ')
async def nudes(message: types.Message):
    # if message.chat.id not in CHATS_SET:
    #     return
    check = await check_id(message, BEER_TIMES, BEER_DUPLICATE)
    if not check:
        if not BEER_DUPLICATE[message.from_id]:
            await message.reply("–Ü–¥–∏ —Ç—Ä–µ–∑–≤—ñ–π! –ü–æ—Ç—ñ–º –ø–æ–≤–µ—Ä–Ω–µ—à—Å—è –∑–∞ –ø–∏–≤–æ–º!")
        BEER_DUPLICATE[message.from_id] = True
    else:
        tag_arr = await get_all_tag()
        men = random.choice(tag_arr)
        action = random.uniform(0, 1)
        if action <= 0.1:
            await message.reply(f"–¢–∏ —Ç–æ—Ä—á–∏—à –±–æ—á–∫—É –≥–æ—Ä—é—á–æ–≥–æ –Ω–∞–ø–æ—é –¥–ª—è {men}")
        elif action <= 0.5:
            await message.reply(f"–¢–æ–±—ñ {men} —Ç–æ—Ä—á–∏—Ç—å –ª—ñ—Ç—Ä—É –∞–ª–∫–æ–≥–æ–ª—é")
        else:
            await message.reply(f"–í–∏ –∑ {men} –ø–æ–≤–∏–Ω–Ω—ñ —Å—Ö–æ–¥–∏—Ç–∏ –Ω–∞ –ø—ñ–≤–æ")


# @dp.message_handler(regexp='@–∫–∞—Ä—Ç–∞–¥–Ω—è')
# async def taro(message: types.Message):
#     taro_id = random.choice(TARO_SET)
#     await message.reply_sticker(taro_id)


async def check_id(message: types.Message, array, checker):
    if message.from_id not in array.keys():
        checker[message.from_id] = False
        array[message.from_id] = time.time()
        return True
    delta = time.time() - array[message.from_id]
    if delta > 21600:
        checker[message.from_id] = False
        return True
    return False


@dp.message_handler(regexp='@–Ω—é–¥—Å–∏')
async def nudes(message: types.Message):
    check = await check_id(message, NUDES_TIMES, NUDES_DUPLICATE)
    if not check:
        if not NUDES_DUPLICATE[message.from_id]:
            await message.reply("–ë–∞–≥–∞—Ç–æ –Ω—é–¥—Å—ñ–≤ –ø—Ä–æ—Å–∏—Ç–∏ –ø–æ–≥–∞–Ω–æ! –ú–∞–π —Å–æ–≤—ñ—Å—Ç—å! –ü–æ–ø—Ä–æ—Å–∏ –ø—ñ–∑–Ω—ñ—à–µ")
        NUDES_DUPLICATE[message.from_id] = True
    else:
        tag_arr = await get_all_tag()
        men = random.choice(tag_arr)
        action = random.uniform(0, 1)
        if action <= 0.05:
            await message.reply("–®–æ—Å—å —Ç–∏ –¥—É–∂–µ —Ö–æ—Ä–Ω—ñ. –ü—ñ–¥–∏ –ø–æ–Ω–∏–∑—å —Ö–æ—Ä–Ω—ñ–≥—Ä–∞–¥—É—Å")
        elif action <= 0.2:
            await message.reply("–ê –≤—Å—å–æ, –∞ —Ç–µ–ø–µ—Ä —Ç–∏ –≤–∏–Ω–µ–Ω –Ω—é–¥—Å–∏. –ö–∏–¥–∞–π —Å–≤–æ—ó!!!")
        else:
            await message.reply(f'–¢–æ–±—ñ –ø–æ–≤–∏–Ω–µ–Ω –∫–∏–Ω—É—Ç–∏ –Ω—é–¥—Å–∏ {men}')


@dp.message_handler(regexp='@')
async def tag_users(message: types.Message):
    txt = message.text
    matches = re.finditer(regex, txt, re.MULTILINE)
    tags = set()
    for match in matches:
        tags.add(match.group().strip())
    for tag in tags:
        tags_arr = []
        if tag != "@all":
            if tag in list(TAG_SET.keys()):
                for tag_set in TAG_SET[tag].values():
                    tags_arr = tags_arr + tag_set
            else:
                speciality_all = {}
                for speciality in TAG_SET.values():
                    speciality_all.update(speciality)
                if tag in speciality_all.keys():
                    tags_arr = tags_arr + speciality_all[tag]
        else:
            tags_arr = await get_all_tag()

        if len(tags_arr) != 0:
            if len(tags_arr) > 5:
                tags_len = len(tags_arr)
                iteration = 0
                while iteration < tags_len:
                    left = iteration
                    right = tags_len + 1 if left + 5 > tags_len + 1 else left + 5
                    iteration = iteration + 5
                    tags_slice = tags_arr[left:right]
                    reply_text = "\n".join(tags_slice)
                    await message.reply(f'–õ—é–¥–∏ –∑–∞ —Ç–µ–≥–æ–º {tag}:\n{reply_text}')
            else:
                reply_text = "\n".join(tags_arr)
                await message.reply(f'–õ—é–¥–∏ –∑–∞ —Ç–µ–≥–æ–º {tag}:\n{reply_text}')

# @dp.message_handler(regexp='(–°|—Å)–µ–∫—Å')
# async def all_message(message: types.Message):
#     await message.reply('–Ø–∫—â–æ —Å–µ–∫—Å, —Ç–æ –∫—Ä–∞—â–µ –∂–æ—Å—Ç–∫—ñ–π')
#     await message.reply_sticker('CAACAgIAAxkBAAEFT-Vi1m6y9EU-pfcgaVLYfR5e2Da21gAClQ8AAvhcsEiIoYxQTB4dgykE')
#


@dp.message_handler(regexp='—Ü—å–æ–º')
async def all_message(message: types.Message):
    await message.reply('–¶—å–æ–º!')


# @dp.message_handler(regexp='(–ú|–º)–∞(–º–∞|—Ç—ñ—Ä|—Ç—å|–º—á–∏–∫|–∑–µ—Ä)')
# async def all_message(message: types.Message):
#     messages = [
#         '–Ø –¥—É–∂–µ –ª—é–±–ª—é —Ç–≤–æ—é –º–∞–º—É','–ú–∞—Ç—å —Ç–æ —Ö–æ—Ä–æ—à–æ, –æ—Å–æ–±–ª–∏–≤–æ —Ç–≤–æ—è','–ù—É –Ω–µ –º–∞–º–∫–∞–π',
#         '–ê —Ç–∏ –∑–Ω–∞—î—à –¥–µ —è —Å—å–æ–≥–æ–¥–Ω—ñ –±—É–≤?'
#     ]
#     await message.reply(random.choice(messages))


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
