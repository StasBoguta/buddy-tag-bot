"""
This is a echo bot.
It echoes any incoming text messages.
"""
import logging
import re
import json
import random


from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = '5588729871:AAE_3Y1i4w321rWaLj9f_83myMlFhbV9wHQ'
# API_TOKEN = '1698570040:AAGvmUeVtpTKw18dn-VlTUAXDT04vWp-uhI'
CHATS_SET = [-1001785608646]

f = open('tags.json', encoding="utf8")
TAG_SET = json.load(f)
f.close()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

regex = r"[\s]*@[^\s]+[\s]*"

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when client send `/start` or `/help` commands.
    """
    await bot.send_message(message.chat.id, "Add me to the Buddy group!!\nThat's all that I want!")


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    text = """–í–µ—á—ñ—Ä –≤ —Ö–∞—Ç—É!\n–Ø–∫—â–æ —Ö–æ—á–µ—à –∑–∞–¥–æ–≤–±–∞—Ç–∏ –±–∞–¥–¥—ñ —Ç–µ–≥–∞–Ω—ñ—î–º, —Ç–æ —è —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–∂—É!\n
–®–æ –¥—î–ª–∞—Ç—å:\n1. –í –º–µ–Ω–µ —î –Ω–∞–±—ñ—Ä —Ç–µ–≥—ñ–≤, —è–∫—ñ —Ç–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç. –©–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–≥–∏ –Ω–∞–ø–∏—à–∏ /helpm\n
2. –ü–∏—à–µ—à –≤ —á–∞—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ @fi —ñ —Ç–æ–±—ñ —Ç–µ–≥–Ω–µ –≤—Å—ñ—Ö —Ñ—ñ—à–Ω–∏–∫—ñ–≤. –¢–∞–∫–æ–∂ —î —Ç–µ–≥–∏ –æ–∫—Ä–µ–º–æ –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ.\n\n–•—É—Ç—á—ñ—à –∑–∞—Ç–µ–≥—ñ–≤–∞–π –ª—é–¥–µ–π! –¶—å–æ–º!
    """
    await bot.send_message(message.chat.id, text, parse_mode='Markdown')


@dp.message_handler(commands=['helpm'])
async def send_more_help(message: types.Message):
    text = """
*–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –¥—É–¥–æ—Å–∞ –ë–∞–¥–¥—ñ 2022*\n
@–Ω—é–¥—Å–∏ - —Ç–µ–≥–∞—î –æ–¥–Ω–æ–≥–æ –ë–∞–¥–¥—ñ, —è–∫–∏–π –ø–æ–≤–∏–Ω–Ω–µ–Ω —Ç–æ–±—ñ –∫–∏–Ω—É—Ç–∏ –Ω—é–¥—Å–∏\n
@all - –∑–∞–¥—É–¥–æ—Å–∏—Ç–∏ –≤—Å—ñ—Ö –±–∞–¥–¥—ñ\n
–§–Ü
@—Ñ—ñ - —Ñ—ñ—à–Ω–∏–∫–∏
@–∫–Ω @—ñ–ø–∑ @–ø–º - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö\n
–§–ï–ù
@—Ñ–µ–Ω - –≤–µ—Å—å –§–ï–ù
@—Ñ—ñ–Ω–∞–Ω—Å–∏ @–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ @–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç @–µ–∫–æ–Ω–æ–º—ñ–∫–∞ - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö\n
–§–ü–≤–ù
@—Ñ–ø–≤–Ω - –≤–µ—Å—å –§–ü–≤–ù
@–ø—Ä–∞–≤–æ @–ø—É–±–ª—ñ—á–Ω–µ  - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö\n
–§–°–ù–°–¢
@—Ñ—Å–Ω—Å—Ç - –≤–µ—Å—å –§–°–ù–°–¢
@–ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è @—Å–æ—Ü—ñ–æ–ª–æ–≥—ñ—è @—Å–æ—Ü—Ä–æ–± @–º—ñ–∂–Ω–∞—Ä @–≥—Ä–æ–º–∞–¥—Å—å–∫–µ @–ø–æ–ª—ñ—Ç–æ–ª–æ–≥—ñ—è - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö\n
–§–ü—Ä–ù
@—Ñ–ø—Ä–Ω - –≤–µ—Å—å –§–ü—Ä–ù
@—Ö—ñ–º—ñ—è @—Ñ—ñ–∑–∏–∫–∞ @–µ–∫–æ–ª–æ–≥—ñ—è @–±—ñ–æ–ª–æ–≥—ñ—è - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö\n
–§–ì–ù
@—Ñ–≥–Ω - —Ñ–µ—Å—å –§–ì–ù
@–≥–µ—Ä–º–∞–Ω—Å—å–∫–∞ @—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ @—Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è @–∫—É–ª—å—Ç—É—Ä–æ–ª–æ–≥—ñ—è @—ñ—Å—Ç–æ—Ä—ñ—è - –ø–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è—Ö
    """
    await bot.send_message(message.chat.id, text, parse_mode='Markdown')


@dp.message_handler(regexp='@')
async def tag_users(message: types.Message):
    if message.chat.id not in CHATS_SET:
        return
    txt = message.text
    matches = re.finditer(regex, txt, re.MULTILINE)
    tags = set()
    for match in matches:
        tags.add(match.group().strip())
    for tag in tags:
        tags_arr = []
        if tag == "@–Ω—é–¥—Å–∏":
            tag_arr = []
            for speciality in TAG_SET.values():
                for people in speciality.values():
                    tag_arr = tag_arr + people
            men = random.choice(tag_arr)
            action = random.uniform(0,1)
            if action <= 0.05:
                await message.reply("–®–æ—Å—å —Ç–∏ –¥—É–∂–µ —Ö–æ—Ä–Ω—ñ. –ü—ñ–¥–∏ –ø–æ–Ω–∏–∑—å —Ö–æ—Ä–Ω—ñ–≥—Ä–∞–¥—É—Å https://www.pornhub.com")
            elif action <= 0.2:
                await message.reply("–ê –≤—Å—å–æ, –∞ —Ç–µ–ø–µ—Ä —Ç–∏ –≤–∏–Ω–µ–Ω –Ω—é–¥—Å–∏. –ö–∏–¥–∞–π —Å–≤–æ—ó!!!")
            else:
                await message.reply(f'–¢–æ–±—ñ –ø–æ–≤–∏–Ω–µ–Ω –∫–∏–Ω—É—Ç–∏ –Ω—é–¥—Å–∏ {men}')
        elif tag != "@all":
            if tag in list(TAG_SET.keys()):
                for tag_set in TAG_SET[tag].values():
                    tags_arr = tags_arr + tag_set
            else:
                speciality_all = {}
                for speciality in TAG_SET.values():
                    speciality_all.update(speciality)
                if tag in speciality_all.keys():
                    tags_arr = tags_arr + speciality_all[tag]
        else:
            for speciality in TAG_SET.values():
                for people in speciality.values():
                    tags_arr = tags_arr + people

        if len(tags_arr) != 0:
            if len(tags_arr) > 5:
                tags_len = len(tags_arr)
                iteration = 0
                while iteration < tags_len:
                    left = iteration
                    right = tags_len + 1 if left + 5 > tags_len + 1 else left + 5
                    iteration = iteration + 5
                    tags_slice = tags_arr[left:right]
                    reply_text = "\n".join(tags_slice)
                    await message.reply(f'–õ—é–¥–∏ –∑–∞ —Ç–µ–≥–æ–º {tag}:\n{reply_text}')
            else:
                reply_text = "\n".join(tags_arr)
                await message.reply(f'–õ—é–¥–∏ –∑–∞ —Ç–µ–≥–æ–º {tag}:\n{reply_text}')


@dp.message_handler(regexp='^(–°|—Å)—Ç–∞—Å (–ë|–±)–æ–≥—É—Ç–∞')
async def creator_reply(message: types.Message):
    messages = ['–ê–±–æ–Ω–µ–Ω –Ω–µ –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∞—à –≤–∏–∫–ª–∏–∫, –∞–±–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–∑–∞ –º–µ—Ä–µ–∂–µ—é. –í–∏–∫–ª–∏–∫ –∞–±–æ–Ω–µ–Ω—Ç–∞ @stasboguta',
                '–°—Ç–∞—Å –ë–æ–≥—É—Ç–∞ –≤–º–µ—Ä, –Ω–µ —à—É–∫–∞–π –π–æ–≥–æ',
                '–ú–¥–∞, —Ç—Ä–µ—à', '–ö—Ä–∞—â–µ –∫–∏–Ω—å –π–æ–º—É –Ω—é–¥—Å–∏', '–ö—ñ—Å-–∫—ñ—Å –∫—ñ—Å-–∫—ñ—Å —è –∫–æ—Ç—ñ–∫ —Ç–∏ –∫–æ—Ç—ñ–∫...', 'ü•µ']
    await message.reply(random.choice(messages))


@dp.message_handler(regexp='(–ü|–ø)—ñ–∑–¥—î—Ü|—î–±–∞–Ω—É—Ç—Å—è')
async def pizdec_reply(message: types.Message):
    stickers = ['CAACAgIAAxkBAAEFT8Zi1llLBedXn3TXXMDebZQeIMEyMQACXBIAAiRhqUtZjwhZKLtMhCkE',
                'CAACAgIAAxkBAAEFT_Bi1nd8CGxgjVPqRqDshn5PbfRIcAAC2BEAAmlDsEs7-qC9ghIJ3ikE',
                'CAACAgIAAxkBAAEFT_Ji1neR7eN66hYZXtjoVrGUhLZxowACJBAAAnSauEhlTY5LdL1UJikE']
    sticker = random.choice(stickers)
    await message.reply_sticker(sticker)


@dp.message_handler(regexp='(–ö|–∫)–∞–ø—ñ–±–∞–ª–∏—Ü—å–∫–∏–π|(–ë|–±)–∞–ª–∏—Ü—å–∫–∏–π|(–ö|–∫)–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä (–ë|–±)–∞–¥–¥—ñ')
async def pizdec_reply(message: types.Message):
    stickers = ['CAACAgIAAxkBAAEFT8pi1lqDBJ2zWAYqU6KjtWm1wnKNvQACRxIAApn9uEhCchH2JItcEikE',
                'CAACAgIAAxkBAAEFT_Ri1nfWXWRjxDIOF8qivU06Q8lb0QACwxEAAk-asUsvJkUU0fhUmykE',
                'CAACAgIAAxkBAAEFT_Zi1nf8XYGgwLtaCEF1WFaLSn0IEQACdBAAAj6huUh-orbJwLdyhSkE']
    sticker = random.choice(stickers)
    await message.reply_sticker(sticker)


@dp.message_handler(regexp='(–¢|—Ç)–µ—Ä–Ω–æ–ø—ñ–ª—å')
async def pizdec_reply(message: types.Message):
    await message.reply_sticker('CAACAgQAAxkBAAEFT8hi1lpj3UTgMOhL8cECZY-AYc66_AACewADzMbLEbHdXkGD-IiFKQQ')


@dp.message_handler(regexp="(–ê|–∞)–ª—ñ–Ω–∞ (–ö|–∫)—Ä—É–ø('|`|')—è–Ω–∏–∫|(–°|—Å)–∞—à–∞ (–¢|—Ç)–µ–º—á|(–¢|—Ç)–µ–º—á")
async def pizdec_reply(message: types.Message):
    await message.reply('üî™üî™üî™üî™üî™')


@dp.message_handler(regexp='–Ω—ñ—Ö—É—è —Å–æ–±—ñ')
async def all_message(message: types.Message):
    stickers = ['CAACAgIAAxkBAAEFT8xi1lucgRpIW2DF0uvltzzrOIzGkAACJBIAAnHAqUs-5_J9etWXeCkE',
                'CAACAgIAAxkBAAEFT_hi1ng7E4B-65WuotOr5RKwOsBhwQACSBIAAqoGqEsnRTpd84G1tCkE',
                'CAACAgIAAxkBAAEFT_pi1nhRs0WduPUqtQoK1Bmw1CRTOgACHxMAAjdVsUveVPgXTCrXzSkE']
    sticker = random.choice(stickers)
    await message.reply_sticker(sticker)


@dp.message_handler(regexp='(–°|—Å)–µ–∫—Å')
async def all_message(message: types.Message):
    await message.reply('–Ø–∫—â–æ —Å–µ–∫—Å, —Ç–æ –∫—Ä–∞—â–µ –∂–æ—Å—Ç–∫—ñ–π')
    await message.reply_sticker('CAACAgIAAxkBAAEFT-Vi1m6y9EU-pfcgaVLYfR5e2Da21gAClQ8AAvhcsEiIoYxQTB4dgykE')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
